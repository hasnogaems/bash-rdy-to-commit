
Content from file: grep.c
#include <getopt.h>
#include <regex.h>
#include <stdio.h>
#include <stdlib.h>

#include "h.h"
#define no_argument 0
#define required_argument 1
#define optional_argument 2
int main(int argc, char *argv[]) {
  if (argc == 1)
    printf(
        "Usage: grep [OPTION]... PATTERNS [FILE]...\nTry 'grep --help' for "
        "more information.\n");
  else {
    int count = 0;
    int *e_count = &count;
    FILE *fp;
    int eflags = 0;
    char *pattern = malloc(100 * sizeof(char));
    char **e_ptrns = (char **)malloc(1025 * sizeof(char *));
    int c=0;
    int x;
    printf("Where?\n");
    Flags flag = parse_flags(argc, argv, e_ptrns, e_count);  // parse flags
    int y = parse_pattern(argc, argv, e_ptrns, &count);      // parse pattern
    int file_name = parse_file_name(y, argv, argc);          // parse file name

    printf("OPTIND=%d", optind);
    // printf("file name is %s its index is%d\n", argv[file_name], file_name);
printf("line31\n");
    open_file_and_i_flag(fp, &flag, optind, argv, &eflags);
    printf("line33\n");
    char *line_ = (char *)malloc(1025 * sizeof(char));  // here we store line from our file we grabbed with fgets
  printf("line34\n");
    if (flag.e != 1 && flag.v != 1 && flag.c !=1)
printf("here?\n");
      while (fgets(line_, 1024, fp)) {
        printf("line 39\n");
        x = regex(argv[y], line_, eflags);
        if (!x) printf("%s", line_);
      }
printf("line 42\n");
    fseek(fp, 0, SEEK_SET);  // Move the cursor to the beginning of the file
    fgets(line_, 1024, fp);

    fseek(fp, 0, SEEK_SET);

    // exec e patterns
    if (flag.v == 1 && flag.e == 1) {
      while (fgets(line_, 1024, fp)) {  // print e patterns
        int loop_count = count;
        while (loop_count > 0) {  
          x = regex(e_ptrns[loop_count - 1], line_, eflags);
          loop_count--;
          // printf("X in E loop=%d\n", x);
          if (x) {
            printf("%s", line_);
          }
        }
      }
      printf("\n");
    }

    if (flag.v == 1) {
      // printf("V==1 and argv[y]=%s", argv[y]);
      while (fgets(line_, 1024, fp)) {  // print e patterns

        
        x = regex(argv[y], line_, eflags);

        // printf("X in E loop=%d\n", x);
        if (x) {
          printf("%s", line_);
        }
      }
      //printf("\n");
    }
    if (flag.v != 1 && flag.c != 1) {
      while (fgets(line_, 1024, fp)) {  // print e patterns
         int loop_count = count;
        while (loop_count > 0) { 
          x = regex(e_ptrns[loop_count - 1], line_, eflags);
          loop_count--;
          // printf("X in E loop=%d\n", x);
          if (!x) {
            printf("%s", line_);
          }
        }
      }
    }
    if (flag.c == 1&&flag.e==1) {
      int c_count = 0;
      while (fgets(line_, 1024, fp)) {  // print e patterns
        int loop_count = count;
        while (loop_count > 0) {  // что значат фиолетовые синие и желтые скобки
          x = regex(e_ptrns[loop_count - 1], line_, eflags);
          loop_count--;
          // printf("X in E loop=%d\n", x);
          if (!x) {
            c_count++;
          }
        }
      }
      printf("%d\n", c_count);
    }

    if(flag.c==1&&flag.e!=1){
      while (fgets(line_, 1024, fp)) {
        x = regex(argv[y], line_, eflags);
        if (!x) count++;
      }
      printf("%d\n", count);

    }
    //         printf("INSIDE THE e_ptrns:\n");
    // for(int n=0;n<2;n++){
    //     printf("%s\n", e_ptrns[n]);}

    free(pattern);
    free(line_);
    free(e_ptrns);
  }
  return 0;
}

Content from file: parse_flags.c
#include <string.h>

#include "h.h"
Flags parse_flags(int argc, char **argv, char **e_ptrns, int *e_count) {
  int c;
  Flags flag = {0};
  int option_index = 0;
  int count = 0;

  if (argc > 1) {
    while (1) {
      c = getopt_long(argc, argv, "e:ivclnhsfo", long_options, &option_index);
      // printf("optind=%d on argv[%s]\n", optind, argv[optind]);
      if (c == -1) break;

      switch (c) {
        case 'e':
          flag.e = 1;
          e_ptrns[*e_count] = optarg;
          (*e_count)++;
          break;
        case 'i':
          flag.i = 1;
          break;
        case 'v':
          flag.v = 1;
          break;
        case 'c':
          flag.c = 1;
          break;
        case 'l':
          flag.l = 1;
          break;
        case 'n':
          flag.n = 1;
          break;
        case 'h':
          flag.h = 1;
          break;
        case 's':
          flag.s = 1;
          break;
        case 'f':
          flag.file = 1;
          break;
        case 'o':
          flag.o = 1;
          break;
      }
    }
  }
  return flag;
}
int parse_pattern(int argc, char **argv, char **e_ptrns, int *count) {
  int i;
  char **x;
  int pattern;
  int pattern_found = 0;

  for (i = 1; i < argc; i++) {
    if (argv[i][0] != '-') {
      pattern = i;
      break;
    }

    //             e_ptrns[*count]=argv[i+1];//argv не важно какой
    //             // индекс если мы читаем оттуда, не должно быть segfault?
    //            // printf("argv[%d]=%s\n", i+1, argv[i+1]);
    //             (*count)++;
    //             x=realloc(e_ptrns, *count*(1025*sizeof(char)));
    //             if(x==NULL)printf("Realloc failed");else e_ptrns=x;
    //                                 }

    //     if(argv[i][0]!='-'&&pattern_found==0/*&&strcmp(argv[i-1],
    //     "-e")!=0*/){ pattern=i;pattern_found=1;}
    //     //else if(argv[i][0]=='-')

    // }
  }
  return pattern;
}
int parse_file_name(int y, char **argv, int argc) {
  int i;
  FILE *fptemp;
  for (i = 1; i < argc; i++) {
    fptemp = fopen(argv[i], "r");
    if (fptemp == NULL)
      // if(i==argc-1)
      continue;
    break;
  }
  fclose(fptemp);
  // printf("File_name=%s argv index of File_name is %d\n", argv[i], i);
  return i;
}
Content from file: regex.c
#include <regex.h>
#include <stdio.h>
int regex(char pattern[], char line[], int eflags) {
  // printf("%d", eflags);// тут лезли нули
  regex_t regex;
  int return_value = regcomp(&regex, pattern, eflags);
  if (return_value) {
    printf("Could not compile regular expression.\n");
    return 1;
  }

  return_value = regexec(&regex, line, 0, NULL, 0);
  if (!return_value) {
  } else {
    // printf("%dNo match.\n",return_value);
  }
  regfree(&regex);
  return return_value;
}

Content from file: function.c
#include "h.h"

int open_file_and_i_flag(FILE* fp,Flags* flag, int file_name, char** argv, int* eflags){
    printf("argv[optind+1]=%s\n", argv[optind+1]);
    fp=fopen(argv[optind+1],"r");//opening file
        if (fp == NULL) 
        {
            printf("Error opening file.\n");
            return -1;//debug
        }
         //here we store line from our file we grabbed with fgets
        if(flag->i==1){ //no distinction between upper and lowercase characters
        (*eflags)=REG_ICASE;
       // printf("EFLAGS IN MAIN=%d\n", eflags);
        }   
}
/* grep_file(){

} */
Content from file: grep.c
#include <getopt.h>
#include <regex.h>
#include <stdio.h>
#include <stdlib.h>

#include "h.h"
#define no_argument 0
#define required_argument 1
#define optional_argument 2
int main(int argc, char *argv[]) {
  if (argc == 1)
    printf(
        "Usage: grep [OPTION]... PATTERNS [FILE]...\nTry 'grep --help' for "
        "more information.\n");
  else {
    int count = 0;
    int *e_count = &count;
    FILE *fp;
    int eflags = 0;
    char *pattern = malloc(100 * sizeof(char));
    char **e_ptrns = (char **)malloc(1025 * sizeof(char *));
    int c=0;
    int x;
    printf("Where?\n");
    Flags flag = parse_flags(argc, argv, e_ptrns, e_count);  // parse flags
    int y = parse_pattern(argc, argv, e_ptrns, &count);      // parse pattern
    int file_name = parse_file_name(y, argv, argc);          // parse file name

    printf("OPTIND=%d", optind);
    // printf("file name is %s its index is%d\n", argv[file_name], file_name);
printf("line31\n");
    open_file_and_i_flag(fp, &flag, optind, argv, &eflags);
    printf("line33\n");
    char *line_ = (char *)malloc(1025 * sizeof(char));  // here we store line from our file we grabbed with fgets
  printf("line34\n");
    if (flag.e != 1 && flag.v != 1 && flag.c !=1)
printf("here?\n");
      while (fgets(line_, 1024, fp)) {
        printf("line 39\n");
        x = regex(argv[y], line_, eflags);
        if (!x) printf("%s", line_);
      }
      fgets(line_, 1024, fp);
printf("line 42\n");
    fseek(fp, 0, SEEK_SET);  // Move the cursor to the beginning of the file
    fgets(line_, 1024, fp);

    fseek(fp, 0, SEEK_SET);

    // exec e patterns
    if (flag.v == 1 && flag.e == 1) {
      while (fgets(line_, 1024, fp)) {  // print e patterns
        int loop_count = count;
        while (loop_count > 0) {  
          x = regex(e_ptrns[loop_count - 1], line_, eflags);
          loop_count--;
          // printf("X in E loop=%d\n", x);
          if (x) {
            printf("%s", line_);
          }
        }
      }
      printf("\n");
    }

    if (flag.v == 1) {
      // printf("V==1 and argv[y]=%s", argv[y]);
      while (fgets(line_, 1024, fp)) {  // print e patterns

        
        x = regex(argv[y], line_, eflags);

        // printf("X in E loop=%d\n", x);
        if (x) {
          printf("%s", line_);
        }
      }
      //printf("\n");
    }
    if (flag.v != 1 && flag.c != 1) {
      while (fgets(line_, 1024, fp)) {  // print e patterns
         int loop_count = count;
        while (loop_count > 0) { 
          x = regex(e_ptrns[loop_count - 1], line_, eflags);
          loop_count--;
          // printf("X in E loop=%d\n", x);
          if (!x) {
            printf("%s", line_);
          }
        }
      }
    }
    if (flag.c == 1&&flag.e==1) {
      int c_count = 0;
      while (fgets(line_, 1024, fp)) {  // print e patterns
        int loop_count = count;
        while (loop_count > 0) {  // что значат фиолетовые синие и желтые скобки
          x = regex(e_ptrns[loop_count - 1], line_, eflags);
          loop_count--;
          // printf("X in E loop=%d\n", x);
          if (!x) {
            c_count++;
          }
        }
      }
      printf("%d\n", c_count);
    }

    if(flag.c==1&&flag.e!=1){
      while (fgets(line_, 1024, fp)) {
        x = regex(argv[y], line_, eflags);
        if (!x) count++;
      }
      printf("%d\n", count);

    }
    //         printf("INSIDE THE e_ptrns:\n");
    // for(int n=0;n<2;n++){
    //     printf("%s\n", e_ptrns[n]);}

    free(pattern);
    free(line_);
    free(e_ptrns);
  }
  return 0;
}

Content from file: parse_flags.c
#include <string.h>

#include "h.h"
Flags parse_flags(int argc, char **argv, char **e_ptrns, int *e_count) {
  int c;
  Flags flag = {0};
  int option_index = 0;
  int count = 0;

  if (argc > 1) {
    while (1) {
      c = getopt_long(argc, argv, "e:ivclnhsfo", long_options, &option_index);
      // printf("optind=%d on argv[%s]\n", optind, argv[optind]);
      if (c == -1) break;

      switch (c) {
        case 'e':
          flag.e = 1;
          e_ptrns[*e_count] = optarg;
          (*e_count)++;
          break;
        case 'i':
          flag.i = 1;
          break;
        case 'v':
          flag.v = 1;
          break;
        case 'c':
          flag.c = 1;
          break;
        case 'l':
          flag.l = 1;
          break;
        case 'n':
          flag.n = 1;
          break;
        case 'h':
          flag.h = 1;
          break;
        case 's':
          flag.s = 1;
          break;
        case 'f':
          flag.file = 1;
          break;
        case 'o':
          flag.o = 1;
          break;
      }
    }
  }
  return flag;
}
int parse_pattern(int argc, char **argv, char **e_ptrns, int *count) {
  int i;
  char **x;
  int pattern;
  int pattern_found = 0;

  for (i = 1; i < argc; i++) {
    if (argv[i][0] != '-') {
      pattern = i;
      break;
    }

    //             e_ptrns[*count]=argv[i+1];//argv не важно какой
    //             // индекс если мы читаем оттуда, не должно быть segfault?
    //            // printf("argv[%d]=%s\n", i+1, argv[i+1]);
    //             (*count)++;
    //             x=realloc(e_ptrns, *count*(1025*sizeof(char)));
    //             if(x==NULL)printf("Realloc failed");else e_ptrns=x;
    //                                 }

    //     if(argv[i][0]!='-'&&pattern_found==0/*&&strcmp(argv[i-1],
    //     "-e")!=0*/){ pattern=i;pattern_found=1;}
    //     //else if(argv[i][0]=='-')

    // }
  }
  return pattern;
}
int parse_file_name(int y, char **argv, int argc) {
  int i;
  FILE *fptemp;
  for (i = 1; i < argc; i++) {
    fptemp = fopen(argv[i], "r");
    if (fptemp == NULL)
      // if(i==argc-1)
      continue;
    break;
  }
  fclose(fptemp);
  // printf("File_name=%s argv index of File_name is %d\n", argv[i], i);
  return i;
}
Content from file: regex.c
#include <regex.h>
#include <stdio.h>
int regex(char pattern[], char line[], int eflags) {
  // printf("%d", eflags);// тут лезли нули
  regex_t regex;
  int return_value = regcomp(&regex, pattern, eflags);
  if (return_value) {
    printf("Could not compile regular expression.\n");
    return 1;
  }

  return_value = regexec(&regex, line, 0, NULL, 0);
  if (!return_value) {
  } else {
    // printf("%dNo match.\n",return_value);
  }
  regfree(&regex);
  return return_value;
}

Content from file: function.c
#include "h.h"

int open_file_and_i_flag(FILE* fp,Flags* flag, int file_name, char** argv, int* eflags){
    printf("argv[optind+1]=%s\n", argv[optind+1]);
    fp=fopen(argv[optind+1],"r");//opening file
        if (fp == NULL) 
        {
            printf("Error opening file.\n");
            return -1;//debug
        }
         //here we store line from our file we grabbed with fgets
        if(flag->i==1){ //no distinction between upper and lowercase characters
        (*eflags)=REG_ICASE;
       // printf("EFLAGS IN MAIN=%d\n", eflags);
        }   
}
/* grep_file(){

} */